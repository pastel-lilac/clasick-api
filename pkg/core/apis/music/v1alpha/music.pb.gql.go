// Code generated by protoc-gen-graphql-gateway. DO NOT EDIT.
// source: music/v1alpha/music.proto

/*
Package v1alpha is a reverse proxy.

It translates gRPC into GraphQL.
*/
package v1alpha

import (
	"context"

	"github.com/graphql-go/graphql"
	"github.com/grpc-custom/graphql-gateway/runtime"
	"github.com/grpc-custom/graphql-gateway/runtime/cache"
	"github.com/grpc-custom/graphql-gateway/runtime/errors"
	"github.com/grpc-custom/graphql-gateway/runtime/scalar"
	"github.com/pastel-lilac/clasick-api/pkg/core/apis/common/v1alpha"
	"golang.org/x/sync/singleflight"
	"google.golang.org/grpc"
	"google.golang.org/grpc/grpclog"
)

var (
	musicType = graphql.NewObject(graphql.ObjectConfig{
		Name: "Music",
		Fields: graphql.Fields{
			"id": &graphql.Field{
				Type: scalar.Uint32,
			},
			"name": &graphql.Field{
				Type: scalar.String,
			},
			"jacketPhoto": &graphql.Field{
				Type: scalar.String,
			},
			"dataSource": &graphql.Field{
				Type: scalar.String,
			},
			"releaseDate": &graphql.Field{
				Type: scalar.Timestamp,
			},
		},
	})

	musicResponseType = graphql.NewObject(graphql.ObjectConfig{
		Name: "MusicResponse",
		Fields: graphql.Fields{
			"musics": &graphql.Field{
				Type: graphql.NewList(musicType),
			},
		},
	})

	getArtistMusicsRequestType = graphql.NewObject(graphql.ObjectConfig{
		Name: "GetArtistMusicsRequest",
		Fields: graphql.Fields{
			"field": &graphql.Field{
				Type: mustFieldType,
			},
			"artistId": &graphql.Field{
				Type: scalar.Uint32,
			},
		},
	})

	getAlbumMusicsRequestType = graphql.NewObject(graphql.ObjectConfig{
		Name: "GetAlbumMusicsRequest",
		Fields: graphql.Fields{
			"field": &graphql.Field{
				Type: mustFieldType,
			},
			"albumId": &graphql.Field{
				Type: scalar.Uint32,
			},
		},
	})

	getPlaylistMusicsRequestType = graphql.NewObject(graphql.ObjectConfig{
		Name: "GetPlaylistMusicsRequest",
		Fields: graphql.Fields{
			"field": &graphql.Field{
				Type: mustFieldType,
			},
			"playlistId": &graphql.Field{
				Type: scalar.Uint32,
			},
		},
	})
)

type musicRPCResolver struct {
	client MusicRPCClient
	group  singleflight.Group
	c      cache.Cache
}

func newMusicRPCResolver(client MusicRPCClient) *musicRPCResolver {
	return &musicRPCResolver{
		client: client,
		group:  singleflight.Group{},
		c:      cache.New(100),
	}
}

func (r *musicRPCResolver) FieldGetArtistMusics() *graphql.Field {
	field := &graphql.Field{
		Name:        "/v1alpha.MusicRPC/GetArtistMusics",
		Description: "",
		Type:        musicResponseType,
		Args: graphql.FieldConfigArgument{
			"field": &graphql.ArgumentConfig{
				Type: mustFieldType,
			},
			"artistId": &graphql.ArgumentConfig{
				Type: scalar.Uint32,
			},
		},
		Resolve: r.resolveGetArtistMusics,
	}
	return field
}

func (r *musicRPCResolver) resolveGetArtistMusics(p graphql.ResolveParams) (interface{}, error) {
	in := &GetArtistMusicsRequest{}
	valueField, ok := p.Args["field"].(*MustField)
	if !ok {
		valueField = nil
	}
	in.Field = valueField
	valueArtistId, ok := p.Args["artistId"].(uint32)
	if !ok {
		valueArtistId = 0
	}
	in.ArtistId = valueArtistId
	ctx := runtime.Context(p.Context)
	if timeout := runtime.GrpcTimeout(ctx); timeout > 0 {
		var cancel context.CancelFunc
		ctx, cancel = context.WithTimeout(ctx, timeout)
		defer cancel()
	}
	result, err := r.client.GetArtistMusics(ctx, in)
	if err != nil {
		return nil, errors.ToGraphQLError(err)
	}
	return result, nil
}

func (r *musicRPCResolver) FieldGetAlbumMusics() *graphql.Field {
	field := &graphql.Field{
		Name:        "/v1alpha.MusicRPC/GetAlbumMusics",
		Description: "",
		Type:        musicResponseType,
		Args: graphql.FieldConfigArgument{
			"field": &graphql.ArgumentConfig{
				Type: mustFieldType,
			},
			"albumId": &graphql.ArgumentConfig{
				Type: scalar.Uint32,
			},
		},
		Resolve: r.resolveGetAlbumMusics,
	}
	return field
}

func (r *musicRPCResolver) resolveGetAlbumMusics(p graphql.ResolveParams) (interface{}, error) {
	in := &GetAlbumMusicsRequest{}
	valueField, ok := p.Args["field"].(*MustField)
	if !ok {
		valueField = nil
	}
	in.Field = valueField
	valueAlbumId, ok := p.Args["albumId"].(uint32)
	if !ok {
		valueAlbumId = 0
	}
	in.AlbumId = valueAlbumId
	ctx := runtime.Context(p.Context)
	if timeout := runtime.GrpcTimeout(ctx); timeout > 0 {
		var cancel context.CancelFunc
		ctx, cancel = context.WithTimeout(ctx, timeout)
		defer cancel()
	}
	result, err := r.client.GetAlbumMusics(ctx, in)
	if err != nil {
		return nil, errors.ToGraphQLError(err)
	}
	return result, nil
}

func (r *musicRPCResolver) FieldGetPlaylistMusics() *graphql.Field {
	field := &graphql.Field{
		Name:        "/v1alpha.MusicRPC/GetPlaylistMusics",
		Description: "",
		Type:        musicResponseType,
		Args: graphql.FieldConfigArgument{
			"field": &graphql.ArgumentConfig{
				Type: mustFieldType,
			},
			"playlistId": &graphql.ArgumentConfig{
				Type: scalar.Uint32,
			},
		},
		Resolve: r.resolveGetPlaylistMusics,
	}
	return field
}

func (r *musicRPCResolver) resolveGetPlaylistMusics(p graphql.ResolveParams) (interface{}, error) {
	in := &GetPlaylistMusicsRequest{}
	valueField, ok := p.Args["field"].(*MustField)
	if !ok {
		valueField = nil
	}
	in.Field = valueField
	valuePlaylistId, ok := p.Args["playlistId"].(uint32)
	if !ok {
		valuePlaylistId = 0
	}
	in.PlaylistId = valuePlaylistId
	ctx := runtime.Context(p.Context)
	if timeout := runtime.GrpcTimeout(ctx); timeout > 0 {
		var cancel context.CancelFunc
		ctx, cancel = context.WithTimeout(ctx, timeout)
		defer cancel()
	}
	result, err := r.client.GetPlaylistMusics(ctx, in)
	if err != nil {
		return nil, errors.ToGraphQLError(err)
	}
	return result, nil
}

func RegisterMusicRPCFromEndpoint(ctx context.Context, mux *runtime.ServeMux, endpoint string, opts []grpc.DialOption) (err error) {
	conn, err := grpc.DialContext(ctx, endpoint, opts...)
	if err != nil {
		return
	}
	defer func() {
		if err != nil {
			if e := conn.Close(); e != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, e)
			}
			return
		}
		go func() {
			<-ctx.Done()
			if e := conn.Close(); e != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, e)
			}
		}()
	}()
	return RegisterMusicRPCHandler(mux, conn)
}

func RegisterMusicRPCHandler(mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	return RegisterMusicRPCHandlerClient(mux, NewMusicRPCClient(conn))
}

func RegisterMusicRPCHandlerClient(mux *runtime.ServeMux, client MusicRPCClient) error {
	svc := newMusicRPCResolver(client)
	// gRPC /v1alpha.MusicRPC/GetArtistMusics
	mux.AddQuery("getArtistMusics", svc.FieldGetArtistMusics())
	// gRPC /v1alpha.MusicRPC/GetAlbumMusics
	mux.AddQuery("getAlbumMusics", svc.FieldGetAlbumMusics())
	// gRPC /v1alpha.MusicRPC/GetPlaylistMusics
	mux.AddQuery("getPlaylistMusics", svc.FieldGetPlaylistMusics())
	return nil
}
