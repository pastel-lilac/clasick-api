// Code generated by protoc-gen-graphql-gateway. DO NOT EDIT.
// source: artist/v1alpha/artist.proto

/*
Package v1alpha is a reverse proxy.

It translates gRPC into GraphQL.
*/
package v1alpha

import (
	"context"

	"github.com/graphql-go/graphql"
	"github.com/grpc-custom/graphql-gateway/runtime"
	"github.com/grpc-custom/graphql-gateway/runtime/cache"
	"github.com/grpc-custom/graphql-gateway/runtime/errors"
	"github.com/grpc-custom/graphql-gateway/runtime/scalar"
	"github.com/pastel-lilac/clasick-api/pkg/core/apis/common/v1alpha"
	"golang.org/x/sync/singleflight"
	"google.golang.org/grpc"
	"google.golang.org/grpc/grpclog"
)

var (
	artistType = graphql.NewObject(graphql.ObjectConfig{
		Name: "Artist",
		Fields: graphql.Fields{
			"id": &graphql.Field{
				Type: scalar.Uint32,
			},
			"name": &graphql.Field{
				Type: scalar.String,
			},
			"jacketPhoto": &graphql.Field{
				Type: scalar.String,
			},
			"debutDate": &graphql.Field{
				Type: scalar.Timestamp,
			},
		},
	})

	artistResponseType = graphql.NewObject(graphql.ObjectConfig{
		Name: "ArtistResponse",
		Fields: graphql.Fields{
			"artists": &graphql.Field{
				Type: graphql.NewList(artistType),
			},
		},
	})

	getArtistsByGenreRequestType = graphql.NewObject(graphql.ObjectConfig{
		Name: "GetArtistsByGenreRequest",
		Fields: graphql.Fields{
			"field": &graphql.Field{
				Type: mustFieldType,
			},
			"genreId": &graphql.Field{
				Type: scalar.Uint32,
			},
		},
	})
)

type artistRPCResolver struct {
	client ArtistRPCClient
	group  singleflight.Group
	c      cache.Cache
}

func newArtistRPCResolver(client ArtistRPCClient) *artistRPCResolver {
	return &artistRPCResolver{
		client: client,
		group:  singleflight.Group{},
		c:      cache.New(100),
	}
}

func (r *artistRPCResolver) FieldGetArtistsByGenre() *graphql.Field {
	field := &graphql.Field{
		Name:        "/v1alpha.ArtistRPC/GetArtistsByGenre",
		Description: "",
		Type:        artistResponseType,
		Args: graphql.FieldConfigArgument{
			"field": &graphql.ArgumentConfig{
				Type: mustFieldType,
			},
			"genreId": &graphql.ArgumentConfig{
				Type: scalar.Uint32,
			},
		},
		Resolve: r.resolveGetArtistsByGenre,
	}
	return field
}

func (r *artistRPCResolver) resolveGetArtistsByGenre(p graphql.ResolveParams) (interface{}, error) {
	in := &GetArtistsByGenreRequest{}
	valueField, ok := p.Args["field"].(*MustField)
	if !ok {
		valueField = nil
	}
	in.Field = valueField
	valueGenreId, ok := p.Args["genreId"].(uint32)
	if !ok {
		valueGenreId = 0
	}
	in.GenreId = valueGenreId
	ctx := runtime.Context(p.Context)
	if timeout := runtime.GrpcTimeout(ctx); timeout > 0 {
		var cancel context.CancelFunc
		ctx, cancel = context.WithTimeout(ctx, timeout)
		defer cancel()
	}
	result, err := r.client.GetArtistsByGenre(ctx, in)
	if err != nil {
		return nil, errors.ToGraphQLError(err)
	}
	return result, nil
}

func RegisterArtistRPCFromEndpoint(ctx context.Context, mux *runtime.ServeMux, endpoint string, opts []grpc.DialOption) (err error) {
	conn, err := grpc.DialContext(ctx, endpoint, opts...)
	if err != nil {
		return
	}
	defer func() {
		if err != nil {
			if e := conn.Close(); e != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, e)
			}
			return
		}
		go func() {
			<-ctx.Done()
			if e := conn.Close(); e != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, e)
			}
		}()
	}()
	return RegisterArtistRPCHandler(mux, conn)
}

func RegisterArtistRPCHandler(mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	return RegisterArtistRPCHandlerClient(mux, NewArtistRPCClient(conn))
}

func RegisterArtistRPCHandlerClient(mux *runtime.ServeMux, client ArtistRPCClient) error {
	svc := newArtistRPCResolver(client)
	// gRPC /v1alpha.ArtistRPC/GetArtistsByGenre
	mux.AddQuery("getArtistsByGenre", svc.FieldGetArtistsByGenre())
	return nil
}
