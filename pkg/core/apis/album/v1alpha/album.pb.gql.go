// Code generated by protoc-gen-graphql-gateway. DO NOT EDIT.
// source: album/v1alpha/album.proto

/*
Package v1alpha is a reverse proxy.

It translates gRPC into GraphQL.
*/
package v1alpha

import (
	"context"

	"github.com/graphql-go/graphql"
	"github.com/grpc-custom/graphql-gateway/runtime"
	"github.com/grpc-custom/graphql-gateway/runtime/cache"
	"github.com/grpc-custom/graphql-gateway/runtime/errors"
	"github.com/grpc-custom/graphql-gateway/runtime/scalar"
	"github.com/pastel-lilac/clasick-api/pkg/core/apis/common/v1alpha"
	"golang.org/x/sync/singleflight"
	"google.golang.org/grpc"
	"google.golang.org/grpc/grpclog"
)

var (
	albumType = graphql.NewObject(graphql.ObjectConfig{
		Name: "Album",
		Fields: graphql.Fields{
			"id": &graphql.Field{
				Type: scalar.Uint32,
			},
			"name": &graphql.Field{
				Type: scalar.String,
			},
			"jacketPhoto": &graphql.Field{
				Type: scalar.String,
			},
		},
	})

	albumResponseType = graphql.NewObject(graphql.ObjectConfig{
		Name: "AlbumResponse",
		Fields: graphql.Fields{
			"albums": &graphql.Field{
				Type: graphql.NewList(albumType),
			},
		},
	})

	getArtistAlbumsRequestType = graphql.NewObject(graphql.ObjectConfig{
		Name: "GetArtistAlbumsRequest",
		Fields: graphql.Fields{
			"field": &graphql.Field{
				Type: mustFieldType,
			},
			"artistId": &graphql.Field{
				Type: scalar.Uint32,
			},
		},
	})
)

type albumRPCResolver struct {
	client AlbumRPCClient
	group  singleflight.Group
	c      cache.Cache
}

func newAlbumRPCResolver(client AlbumRPCClient) *albumRPCResolver {
	return &albumRPCResolver{
		client: client,
		group:  singleflight.Group{},
		c:      cache.New(100),
	}
}

func (r *albumRPCResolver) FieldGetArtistAlbums() *graphql.Field {
	field := &graphql.Field{
		Name:        "/v1alpha.AlbumRPC/GetArtistAlbums",
		Description: "",
		Type:        albumResponseType,
		Args: graphql.FieldConfigArgument{
			"field": &graphql.ArgumentConfig{
				Type: mustFieldType,
			},
			"artistId": &graphql.ArgumentConfig{
				Type: scalar.Uint32,
			},
		},
		Resolve: r.resolveGetArtistAlbums,
	}
	return field
}

func (r *albumRPCResolver) resolveGetArtistAlbums(p graphql.ResolveParams) (interface{}, error) {
	in := &GetArtistAlbumsRequest{}
	valueField, ok := p.Args["field"].(*MustField)
	if !ok {
		valueField = nil
	}
	in.Field = valueField
	valueArtistId, ok := p.Args["artistId"].(uint32)
	if !ok {
		valueArtistId = 0
	}
	in.ArtistId = valueArtistId
	ctx := runtime.Context(p.Context)
	if timeout := runtime.GrpcTimeout(ctx); timeout > 0 {
		var cancel context.CancelFunc
		ctx, cancel = context.WithTimeout(ctx, timeout)
		defer cancel()
	}
	result, err := r.client.GetArtistAlbums(ctx, in)
	if err != nil {
		return nil, errors.ToGraphQLError(err)
	}
	return result, nil
}

func RegisterAlbumRPCFromEndpoint(ctx context.Context, mux *runtime.ServeMux, endpoint string, opts []grpc.DialOption) (err error) {
	conn, err := grpc.DialContext(ctx, endpoint, opts...)
	if err != nil {
		return
	}
	defer func() {
		if err != nil {
			if e := conn.Close(); e != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, e)
			}
			return
		}
		go func() {
			<-ctx.Done()
			if e := conn.Close(); e != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, e)
			}
		}()
	}()
	return RegisterAlbumRPCHandler(mux, conn)
}

func RegisterAlbumRPCHandler(mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	return RegisterAlbumRPCHandlerClient(mux, NewAlbumRPCClient(conn))
}

func RegisterAlbumRPCHandlerClient(mux *runtime.ServeMux, client AlbumRPCClient) error {
	svc := newAlbumRPCResolver(client)
	// gRPC /v1alpha.AlbumRPC/GetArtistAlbums
	mux.AddQuery("getArtistAlbums", svc.FieldGetArtistAlbums())
	return nil
}
